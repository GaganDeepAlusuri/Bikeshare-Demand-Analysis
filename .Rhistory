rm(list=ls())
rm(list=ls())
library(rio)
restaurant=import("6304 Module 5 Data Sets.xlsx",
sheet="Restaurant",skip=2)
colnames(restaurant)=tolower(make.names(colnames(restaurant)))
attach(restaurant)
names(restaurant)
plot(rooms.occupied,revenue,pch=19,main="Restaurant Revenue")
plot(rooms.occupied,revenue,pch=19,
main="Restaurant Revenue", xlim=c(0,100),ylim=c(0,10000))
cor(rooms.occupied,revenue)
restaurant.out=lm(revenue~rooms.occupied,data=restaurant)
?matrix
freq = c(0.6,0.3,0.4,0.4,0.2,0.6,0.3,0.4,0.9,0.2) #freq of hospital vists per patient over 12 months.
BP = c(103,87,32,43,59,109,78,205,135,178) #BP of each patient
first = c(1,1,1,1,0,0,0,0,NA,1) #first doctor BP evaluation
second = c(0,0,1,1,0,0,1,1,1,1) #second doctor BP evaluation
final = c(0,1,0,1,0,1,0,1,1,1) #final evaluation
hospital.df = data.frame(freq,BP,first,second,final)
hospital.df$freq = 100 * hospital.df$freq
#Boxplot
boxplot(hospital.df$freq, hospital.df$BP, names = c("Freq. of hospital visits over 12 months","BP" ))
#Histogram
par(mfrow=c(1,2))
hist(hospital.df$freq, main='Histogram of % of hospital visits',xlab = 'Frequency of visits',ylab = 'Number of patients',col='green')
hist(hospital.df$BP, col='red',main='Histogram of BP',ylab = 'Number of patients',xlab = 'BP')
desc(hospital.df$BP)
str(hospital.df$BP)
summary(hospital.df$BP)
mean(hospital.df$BP)
sd(hospital.df$BP)
mean(hospital.df$final)
hospital.df
casual_ols = lm(log(casual + 1) ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year , data = d)
rm(list=ls())
rm(list=ls())
library(readxl)
library(lattice)
library(gridExtra)
library(dplyr)
library(corrplot)
library(lubridate)
library(PerformanceAnalytics)
d = read_excel("Bikeshare.xlsx")
d$date <- as.Date(d$date)
rm(list=ls())
library(readxl)
library(lattice)
library(gridExtra)
library(dplyr)
library(corrplot)
library(lubridate)
library(PerformanceAnalytics)
d = read_excel("Bikeshare.xlsx")
setwd("C:/Users/gagan/OneDrive/Desktop/Courses/SDM/mid term exam")
rm(list=ls())
library(readxl)
library(lattice)
library(gridExtra)
library(dplyr)
library(corrplot)
library(lubridate)
library(PerformanceAnalytics)
d = read_excel("Bikeshare.xlsx")
str(d)
summary(d)
colSums(is.na(d))                         # Check for missing values
d$weather = as.factor(d$weather)          #To answer 5.a
d$workday = as.factor(d$workday)          #To answer 5.b
#To answer 5.b,5.c and 5.d we need to split the date variable into month and   day.
d$date <- as.Date(d$date)
d$month = as.factor(format(d$date, "%m"))
levels(d$month) <- list(jan="01",
feb="02",
march="03",
april="04",
may="05",
jun="06",
july="07",
aug="08",
sept="09",
oct="10",
nov="11",
dec="12")
d$workday = as.factor(d$workday)
d$day = as.factor(format(d$date, "%a"))
d$day <- relevel(d$day, "Sun")
d$hour <- as.factor(d$hour)
str(d)
#We have 3 dependent variables, casual, registered and count. Lets look at their distributions.
#Looking at casual
p1 = histogram(~casual, data=d)
p2 = histogram(~log(casual), data=d)
summary(d$casual)
#Looking at registered
p3 = histogram(~registered, data =d)
p4 = histogram(~log(registered), data=d)
summary(d$registered)
#Looking at count
p5 = histogram(~count, data =d)
p6 = histogram(~log(count), data=d)
summary(d$count)
grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 2)
casual_ols = lm(log(casual + 1) ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year , data = d)
d$year <- factor(format(d$date, "%Y"))
d$year <- relevel(d$year, "2011")
casual_ols = lm(log(casual + 1) ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year , data = d)
registered_ols = lm(log(registered + 1) ~  weekend + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d)
registered_ols = lm(log(registered + 1) ~  workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d)
count_ols = lm(log(count) ~ weekend + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d)
count_ols = lm(log(count) ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d)
stargazer(casual_ols, registered_ols, count_ols, type="text", single.row=TRUE)
library(stargazer)
stargazer(casual_ols, registered_ols, count_ols, type="text", single.row=TRUE)
plot(count_ols)                                  # Linearity: failed, has omitted variables
norm <- rnorm(500)
ks.test(norm, count_ols$fit)                     # K-S test: Failed multivariate normality
norm <- rnorm(500)
ks.test(norm, count_ols$fit)                     # K-S test: Failed multivariate normality
library("car")
norm <- rnorm(500)
ks.test(norm, count_ols$fit)                     # K-S test: Failed multivariate normality
# Normality
qqnorm(count_ols$residuals,pch=19,
main="Normality Plot, Counts")
qqline(count_ols$residuals,lwd=3,col="red")
qqline(count_ols$residuals,lwd=3,col="red")
hist(count_ols$residuals,col="red",
main="Residuals, Counts",
probability=TRUE)                     # Normality:Failed
# Normality
qqnorm(count_ols$residuals,pch=19,
main="Normality Plot, Counts")
qqline(count_ols$residuals,lwd=3,col="red")
library("lmtest")
bptest(count_ols)                                # Breusch-Pagan test: failed homoskedasticity
vif(count_ols)                                   # VIF test: failed multi-collinearity
library(lmtest)                           # Durbin-Watson test: Failed independence
dwtest(count_ols)
vif(count_ols)                                   # VIF test: failed multi-collinearity
plot(registered_ols)                                  # Linearity: passed, has omitted variables
# Normality
qqnorm(count_ols$residuals,pch=19,
main="Normality Plot, Counts")
qqline(count_ols$residuals,lwd=3,col="red")                 # Normality:Failed
library("lmtest")
bptest(count_ols)                                # Breusch-Pagan test: failed homoskedasticity
vif(count_ols)                                   # VIF test: failed multi-collinearity but we could give it a pass.
library(lmtest)                           # Durbin-Watson test: Failed independence
dwtest(count_ols)
# Normality
qqnorm(registered_ols$residuals,pch=19,
main="Normality Plot, Counts")
qqline(registered_ols$residuals,lwd=3,col="red")                 # Normality:Failed
bptest(registered_ols)                                # Breusch-Pagan test: failed homoskedasticity
vif(registered_ols)                                   # VIF test: failed multi-collinearity but we could give it a pass.
dwtest(registered_ols)
plot(casual_ols)                                  # Linearity: passed, has omitted variables
# Normality
qqnorm(casual_ols$residuals,pch=19,
main="Normality Plot, Casual")
qqline(casual_ols$residuals,lwd=3,col="red")                 # Normality:Failed
bptest(casual_ols)                                # Breusch-Pagan test: failed homoskedasticity
vif(casual_ols)                                   # VIF test: failed multi-collinearity but we could give it a pass.
dwtest(casual_ols)
#' Perhaps we should try GLM with a different (Poisson) dist. Since Poisson regression is a good choice for count variables like casual,
#' registered and count.
casual_pois =  glm(casual ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year,family = poisson(link = log), data = d)
registered_pois = glm(registered ~  workday + weather + fltemp + humidity + windspeed + hour + day + month + year,family = poisson(link = log), data = d)
count_pois = glm(count ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year,family = poisson(link = log), data = d)
stargazer(casual_pois, registered_pois, count_pois, type="text", single.row=TRUE)
#overdispersion test
library(AER)
dispersiontest(casual_pois) #Overdispersion exists with dispersion parameter = 7.8
dispersiontest(registered_pois) #overdispersion exists with theta = 25
dispersiontest(count_pois) #overdispersion exists with theta = 31
#' Because of overdispersion (lambda=8,24 and 30), Poisson estimates are not reliable.
devratio <- sum(resid(casual_pois, type = "pearson")^2) / df.residual(casual_pois)
devratio
casual_quasi = glm(casual ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, family = quasipoisson(link = log), data = d)
registered_quasi = glm(registered ~  workday + weather + fltemp + humidity + windspeed + hour + day + month + year, family = quasipoisson(link = log), data = d)
count_quasi = glm(count ~  workday + weather + fltemp + humidity + windspeed + hour + day + month + year, family = quasipoisson(link = log), data = d)
#Test for multi-collinearity and Independence
vif(casual_quasi) #Fail
dwtest(count_quasi) # Durbin-Watson test: Failed independence
vif(registered_quasi)
dwtest(registered_quasi) # Durbin-Watson test: Failed independence
vif(count_quasi) #fail
dwtest(count_quasi) #fail
qqnorm(casual_quasi$residuals,pch=19,
main="Normality Plot, Casual")
qqline(casual_quasi$residuals,lwd=3,col="red")
casual_nb = glm.nb(casual ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d)
library(MASS)
casual_nb = glm.nb(casual ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d)
registered_nb = glm.nb(registered ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d)
count_nb = glm.nb(count ~ workday+ weather+ fltemp + humidity + windspeed + hour + month + year, data = d)
vif(casual_nb) #Fail
dwtest(casual_nb)
dwtest(registered_nb) #Fail
vif(count_nb)
dwtest(count_nb)
casual_zip <- zeroinfl(casual ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d , dist="negbin", link = "logit")
library(pscl)
casual_zip <- zeroinfl(casual ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d , dist="negbin", link = "logit")
registered_zip <- zeroinfl(registered ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d , dist="negbin", link = "log")
casual_zip <- zeroinfl(casual ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d , dist="negbin", link = "log")
casual_zip <- zeroinfl(casual ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d , dist="negbin", link = "log")
casual_zip <- zeroinfl(casual ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d , dist="negbin", link = "logit")
count_zip <- zeroinfl(count ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d , dist="negbin", link = "log")
count_zip <- zeroinfl(count ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d , dist="negbin", link = "logit")
count_zip <- zeroinfl(count ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d , dist="negbin", link = "logit")
casual_zip <- zeroinfl(casual ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d , dist="negbin", link = "logit")
registered_zip <- zeroinfl(registered ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d , dist="negbin", link = "logit")
count_zip <- zeroinfl(count ~ workday + weather + fltemp + humidity + windspeed + hour + day + month + year, data = d , dist="negbin", link = "logit")
# Normality
qqnorm(count_ols$residuals,pch=19,
main="Normality Plot, Counts")
qqline(count_ols$residuals,lwd=3,col="red")                 # Normality:Failed
qqline(count_ols$residuals,lwd=3,col="red")                 # Normality: Fails and lower and upper tails. But can be passed.
# Normality
qqnorm(count_ols$residuals,pch=19,
main="Normality Plot, Counts")
qqline(count_ols$residuals,lwd=3,col="red")                 # Normality: Fails and lower and upper tails. But can be passed.
library("lmtest")
bptest(count_ols)                                # Breusch-Pagan test: failed homoskedasticity
# Equality of Variances
plot(count_ols$fitted.values,rstandard(count_ols),
pch=19,main="Equality of Variances, Counts")
abline(0,0,lwd=3,col="red")
bartlett.test(count_ols$residuals, data=d)
bartlett.test(count_ols$residuals, d)
stargazer(casual_quasi, registered_quasi, count_quasi, type="text", single.row=TRUE)
stargazer(casual_nb, registered_nb, count_nb, type="text", single.row=TRUE)
summary(count_nb)
stargazer(casual_nb, registered_nb, count_nb, type="text", single.row=TRUE)
count_nb = glm.nb(count ~ workday+ weather+ fltemp + humidity + windspeed + hour + day + month + year, data = d)
stargazer(casual_nb, registered_nb, count_nb, type="text", single.row=TRUE)
levels(d$weather)
str(d$weather)
0.059 - (-0.042)
0.025 - (-0.169)
0.032 - (-0.135)
